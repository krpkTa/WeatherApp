const express = require('express');
const fs = require('fs');
const path = require('path');
const router = express.Router();

const MEMES_FILE = path.join(__dirname, '../memes.json');
const ADMIN_TOKEN = process.env.ADMIN_TOKEN || 'supersecretadmintoken';

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
router.get('/random', async (req, res) => {
  try {
    let memesData = { hot: [], cold: [] };
    if (fs.existsSync(MEMES_FILE)) {
      const fileContent = fs.readFileSync(MEMES_FILE, 'utf-8');
      memesData = JSON.parse(fileContent);
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω temp, –≤—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É
    let group = null;
    if (req.query.temp !== undefined) {
      const temp = parseFloat(req.query.temp);
      group = temp >= 20 ? 'hot' : 'cold';
    }

    let meme = null;
    if (group && memesData[group] && memesData[group].length > 0) {
      const arr = memesData[group];
      meme = arr[Math.floor(Math.random() * arr.length)];
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –ø—Ä–æ–±—É–µ–º –ª—é–±—É—é –≥—Ä—É–ø–ø—É
    if (!meme) {
      const allMemes = [...(memesData.hot || []), ...(memesData.cold || [])];
      if (allMemes.length > 0) {
        meme = allMemes[Math.floor(Math.random() * allMemes.length)];
      }
    }

    // –ï—Å–ª–∏ –º–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!meme) {
      meme = {
        image: 'https://via.placeholder.com/400x300/FF6B6B/FFFFFF?text=–ú–µ–º+–∑–¥–µ—Å—å',
        text: '–ú–µ–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É!'
      };
    }

    res.json(meme);
  } catch (error) {
    console.error('Error fetching meme:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –º–µ–º –ø–æ ID
    const mockMeme = {
      id: parseInt(id),
      imageUrl: `https://via.placeholder.com/400x300/4ECDC4/FFFFFF?text=–ú–µ–º+${id}`,
      caption: `–ú–µ–º –Ω–æ–º–µ—Ä ${id} - —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ —Å–º–µ—à–Ω–æ–µ! üòÑ`,
      source: 'Weather App Memes',
      timestamp: new Date().toISOString()
    };
    
    res.json(mockMeme);
  } catch (error) {
    console.error('Error fetching meme by ID:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞' });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–º–∞ —á–µ—Ä–µ–∑ POST /memes
router.post('/', express.json(), (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const token = req.headers['authorization'] || req.headers['x-admin-token'];
  if (!token || token !== ADMIN_TOKEN) {
    return res.status(401).json({ error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ–º—ã' });
  }

  const { weatherType, image, text } = req.body;
  if (!weatherType || !['hot', 'cold'].includes(weatherType)) {
    return res.status(400).json({ error: 'weatherType –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "hot" –∏–ª–∏ "cold"' });
  }
  if (!image || !text) {
    return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å image –∏ text' });
  }

  // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π JSON —Å –º–µ–º–∞–º–∏
  let memesData = { hot: [], cold: [] };
  if (fs.existsSync(MEMES_FILE)) {
    try {
      const fileContent = fs.readFileSync(MEMES_FILE, 'utf-8');
      memesData = JSON.parse(fileContent);
    } catch (e) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –º–µ–º–æ–≤' });
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ–º
  memesData[weatherType].push({ image, text });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  try {
    fs.writeFileSync(MEMES_FILE, JSON.stringify(memesData, null, 2), 'utf-8');
    res.status(201).json({ success: true, meme: { image, text }, weatherType });
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –º–µ–º–æ–≤' });
  }
});

module.exports = router; 
import React, { useState, useEffect } from 'react';
import './App.css';
import WeatherDisplay from './components/WeatherDisplay';
import SearchForm from './components/SearchForm';
import MemeDisplay from './components/MemeDisplay';
import CloudBackground from './CloudBackground';
import { API_ENDPOINTS } from './config';

function getQueryParam(name) {
  return new URLSearchParams(window.location.search).get(name);
}

function App() {
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [memeData, setMemeData] = useState(null);
  const [memeLoading, setMemeLoading] = useState(false);
  const [cityFromUrl, setCityFromUrl] = useState(getQueryParam('city') || '');
  const [memeFromUrl, setMemeFromUrl] = useState(getQueryParam('meme') || '');

  useEffect(() => {
    if (cityFromUrl) {
      fetchWeather(cityFromUrl);
    }
    // eslint-disable-next-line
  }, []);

  const fetchWeather = async (city) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch(`${API_ENDPOINTS.WEATHER}/${city}`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
      const data = await response.json();
      setWeatherData(data);
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–º –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
      fetchMeme(data.temperature);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // temp ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å undefined –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  const fetchMeme = async (temp) => {
    setMemeLoading(true);
    try {
      let url = `${API_ENDPOINTS.MEMES}/random`;
      if (typeof temp === 'number') {
        url += `?temp=${temp}`;
      }
      if (memeFromUrl) {
        url += (url.includes('?') ? '&' : '?') + `meme=${encodeURIComponent(memeFromUrl)}`;
      }
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–∞');
      }
      const data = await response.json();
      setMemeData({
        imageUrl: data.image,
        caption: data.text,
        source: data.source,
        timestamp: data.timestamp
      });
    } catch (err) {
      console.error('Error loading meme:', err.message);
    } finally {
      setMemeLoading(false);
    }
  };

  return (
    <div className="App">
      <CloudBackground />
      <header className="App-header">
        <h1>üå§Ô∏è Weather App</h1>
        <p>–£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ</p>
      </header>
      
      <main className="App-main">
        <SearchForm onSearch={fetchWeather} onMemeLoad={() => fetchMeme(weatherData?.temperature)} cityValue={cityFromUrl} />
        
        {loading && (
          <div className="loading">
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ...</p>
          </div>
        )}
        
        {error && (
          <div className="error">
            <p>–û—à–∏–±–∫–∞: {error}</p>
          </div>
        )}
        
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–ª–æ–∫–æ–≤ –ø–æ–≥–æ–¥—ã –∏ –º–µ–º–æ–≤ */}
        <div className="content-container">
          {/* –õ–µ–≤–∞—è —Å–µ–∫—Ü–∏—è - –ø–æ–≥–æ–¥–∞ */}
          <div className="weather-section">
            {weatherData && !loading && (
              <WeatherDisplay weather={weatherData} />
            )}
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è —Å–µ–∫—Ü–∏—è - –º–µ–º—ã */}
          {weatherData && !loading && (
            <div className="meme-section">
              <MemeDisplay meme={memeData} />
            </div>
          )}
        </div>
      </main>
      
      <footer className="App-footer">
        <p>&copy; 2024 Weather App. –°–æ–∑–¥–∞–Ω–æ —Å React –∏ Node.js</p>
      </footer>
    </div>
  );
}

export default App; 